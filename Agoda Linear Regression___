{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "82bdfaef",
   "metadata": {},
   "source": [
    "## Agoda  Linear Regression Model \n",
    "----------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39b1d84b",
   "metadata": {},
   "source": [
    "Steps :\n",
    "- Import Dataset \n",
    "- Cleaning \n",
    "- Define x , y\n",
    "- Split Dataset [training - test]\n",
    "- build and train model \n",
    "- predict the test data\n",
    "- evaluate modelت هنا "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db8fb221",
   "metadata": {},
   "source": [
    "## import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9060561e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import Libraries \n",
    "import numpy as np \n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d8b19c49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load Dataset\n",
    "df = pd.read_csv('rooms.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bec9690",
   "metadata": {},
   "source": [
    "## Gather Information From Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "af2ef512",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2247, 6)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "609ebf25",
   "metadata": {},
   "source": [
    "------\n",
    "### Data Cleaning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "737371ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>price</th>\n",
       "      <th>type</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DOYANEN HOTELS YAMATO</td>\n",
       "      <td>18</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PG Kuromon</td>\n",
       "      <td>35</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1,238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bon Condo Namba Nipponbashi</td>\n",
       "      <td>42</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sakura Sands Hotel</td>\n",
       "      <td>32</td>\n",
       "      <td>Good</td>\n",
       "      <td>Price per night as low as</td>\n",
       "      <td>+ FREE CANCELLATION</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>USJまで2駅 懐かしファミコンでスーパーマリオと過ごすお部屋 in Sakura ...</td>\n",
       "      <td>73</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>502室難波日本橋60平方広さ快適洗練された空間和風部屋</td>\n",
       "      <td>43</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Bon Condo Umeda East</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>130 reviews</td>\n",
       "      <td>JUST MISSED IT!</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ocean OTR Park View Bentencho</td>\n",
       "      <td>31</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>LAND MARK NAMBA G</td>\n",
       "      <td>43</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>1</td>\n",
       "      <td>Price per night as low as</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>HOTEL AARON Tsuten East</td>\n",
       "      <td>20</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                name price              type  \\\n",
       "0                              DOYANEN HOTELS YAMATO    18  Entire apartment   \n",
       "1                                         PG Kuromon    35  Entire apartment   \n",
       "2                        Bon Condo Namba Nipponbashi    42  Entire apartment   \n",
       "3                                 Sakura Sands Hotel    32             Good    \n",
       "4  USJまで2駅 懐かしファミコンでスーパーマリオと過ごすお部屋 in Sakura ...    73  Entire apartment   \n",
       "5                       502室難波日本橋60平方広さ快適洗練された空間和風部屋    43  Entire apartment   \n",
       "6                               Bon Condo Umeda East   NaN  Entire apartment   \n",
       "7                      Ocean OTR Park View Bentencho    31  Entire apartment   \n",
       "8                                  LAND MARK NAMBA G    43  Entire apartment   \n",
       "9                            HOTEL AARON Tsuten East    20  Entire apartment   \n",
       "\n",
       "               bedroom_count            bed_count               review_count  \n",
       "0                          1                    1                       881   \n",
       "1                          1                    1                     1,238   \n",
       "2                          1                    3                       196   \n",
       "3  Price per night as low as  + FREE CANCELLATION                        NaN  \n",
       "4                          1                    3                        16   \n",
       "5                          3                    6                         2   \n",
       "6                130 reviews      JUST MISSED IT!                        NaN  \n",
       "7                          1                    2                       333   \n",
       "8                 Highlights                    1  Price per night as low as  \n",
       "9                          1                    2                         3   "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# take alook \n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "14ad41c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>price</th>\n",
       "      <th>type</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1438</th>\n",
       "      <td>Summer Suites Studios</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>771 reviews</td>\n",
       "      <td>JUST MISSED IT!</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1557</th>\n",
       "      <td>EightyOne Newport Boulevard Condotel CLUSTER 1-7N</td>\n",
       "      <td>39</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>1</td>\n",
       "      <td>Exceptional</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Back Kuromon Ichiba AFP Apartment(61)</td>\n",
       "      <td>33</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>2</td>\n",
       "      <td>Awaiting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>seadream tsurumi by yokotani kikaku No.3</td>\n",
       "      <td>31</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>1</td>\n",
       "      <td>Awaiting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1747</th>\n",
       "      <td>Honeymoon Business Queen Suite33C</td>\n",
       "      <td>52</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>1</td>\n",
       "      <td>Exceptional</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1417</th>\n",
       "      <td>M City Lake View 1+1 Room</td>\n",
       "      <td>61</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>603</th>\n",
       "      <td>7mins to Shibuya station/Romantic Room / Room No1</td>\n",
       "      <td>159</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>1</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1035</th>\n",
       "      <td>Designer Arte Plus Studio w Netflix IdealHub 02</td>\n",
       "      <td>27</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>1</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1050</th>\n",
       "      <td>Comfort Service Apartment at The Face KLCC</td>\n",
       "      <td>53</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1640</th>\n",
       "      <td>Extremeli Suites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Very good</td>\n",
       "      <td>JUST MISSED IT!</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>Back Kuromon Ichiba AFP Apartment(61)</td>\n",
       "      <td>33</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>2</td>\n",
       "      <td>Awaiting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>Back Kuromon Ichiba AFP Apartment(61)</td>\n",
       "      <td>33</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>2</td>\n",
       "      <td>Awaiting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>Infinity pool the base low price seaview apart...</td>\n",
       "      <td>29</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>Highlights</td>\n",
       "      <td>1</td>\n",
       "      <td>Awaiting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>841</th>\n",
       "      <td>Zetter Suite Arte Mont Kiara</td>\n",
       "      <td>34</td>\n",
       "      <td>Very good</td>\n",
       "      <td></td>\n",
       "      <td>Select room</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1192</th>\n",
       "      <td>KL17, 2BR with 100mbps at Sungai Besi (4 pax)</td>\n",
       "      <td>37</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   name price  \\\n",
       "1438                              Summer Suites Studios   NaN   \n",
       "1557  EightyOne Newport Boulevard Condotel CLUSTER 1-7N    39   \n",
       "216               Back Kuromon Ichiba AFP Apartment(61)    33   \n",
       "176            seadream tsurumi by yokotani kikaku No.3    31   \n",
       "1747                  Honeymoon Business Queen Suite33C    52   \n",
       "1417                          M City Lake View 1+1 Room    61   \n",
       "603   7mins to Shibuya station/Romantic Room / Room No1   159   \n",
       "1035    Designer Arte Plus Studio w Netflix IdealHub 02    27   \n",
       "1050         Comfort Service Apartment at The Face KLCC    53   \n",
       "1640                                   Extremeli Suites   NaN   \n",
       "97                Back Kuromon Ichiba AFP Apartment(61)    33   \n",
       "68                Back Kuromon Ichiba AFP Apartment(61)    33   \n",
       "426   Infinity pool the base low price seaview apart...    29   \n",
       "841                        Zetter Suite Arte Mont Kiara    34   \n",
       "1192      KL17, 2BR with 100mbps at Sungai Besi (4 pax)    37   \n",
       "\n",
       "                  type    bedroom_count        bed_count  review_count  \n",
       "1438  Entire apartment      771 reviews  JUST MISSED IT!           NaN  \n",
       "1557  Entire apartment       Highlights                1  Exceptional   \n",
       "216   Entire apartment       Highlights                2     Awaiting   \n",
       "176   Entire apartment       Highlights                1     Awaiting   \n",
       "1747  Entire apartment       Highlights                1  Exceptional   \n",
       "1417  Entire apartment                2                4            4   \n",
       "603   Entire apartment       Highlights                1         Good   \n",
       "1035  Entire apartment       Highlights                1    Excellent   \n",
       "1050  Entire apartment                1                1           14   \n",
       "1640        Very good   JUST MISSED IT!              NaN           NaN  \n",
       "97    Entire apartment       Highlights                2     Awaiting   \n",
       "68    Entire apartment       Highlights                2     Awaiting   \n",
       "426   Entire apartment       Highlights                1     Awaiting   \n",
       "841         Very good                        Select room           NaN  \n",
       "1192  Entire apartment                1                3                "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(15,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "01a9c8cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2247 entries, 0 to 2246\n",
      "Data columns (total 6 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   name           2247 non-null   object\n",
      " 1   price          2000 non-null   object\n",
      " 2   type           2247 non-null   object\n",
      " 3   bedroom_count  2246 non-null   object\n",
      " 4   bed_count      2181 non-null   object\n",
      " 5   review_count   1780 non-null   object\n",
      "dtypes: object(6)\n",
      "memory usage: 105.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "105c0463",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name             object\n",
       "price            object\n",
       "type             object\n",
       "bedroom_count    object\n",
       "bed_count        object\n",
       "review_count     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57ebbda8",
   "metadata": {},
   "source": [
    "---------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3d9aaa80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name               0\n",
       "price            247\n",
       "type               0\n",
       "bedroom_count      1\n",
       "bed_count         66\n",
       "review_count     467\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check for null values \n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df0feaf4",
   "metadata": {},
   "source": [
    "# convert column types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8a54c284",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['review_count']  = pd.to_numeric(df['review_count'], errors='coerce')\n",
    "df['bedroom_count']  = pd.to_numeric(df['bedroom_count'], errors='coerce')\n",
    "df['bed_count']  = pd.to_numeric(df['bed_count'], errors='coerce')\n",
    "df['price']  = pd.to_numeric(df['price'], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "684e9043",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name                0\n",
       "price             257\n",
       "type                0\n",
       "bedroom_count    1481\n",
       "bed_count         486\n",
       "review_count     1769\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "af437738",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>price</th>\n",
       "      <th>type</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1438</th>\n",
       "      <td>Summer Suites Studios</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1557</th>\n",
       "      <td>EightyOne Newport Boulevard Condotel CLUSTER 1-7N</td>\n",
       "      <td>39.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Back Kuromon Ichiba AFP Apartment(61)</td>\n",
       "      <td>33.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>seadream tsurumi by yokotani kikaku No.3</td>\n",
       "      <td>31.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1747</th>\n",
       "      <td>Honeymoon Business Queen Suite33C</td>\n",
       "      <td>52.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1417</th>\n",
       "      <td>M City Lake View 1+1 Room</td>\n",
       "      <td>61.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>603</th>\n",
       "      <td>7mins to Shibuya station/Romantic Room / Room No1</td>\n",
       "      <td>159.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1035</th>\n",
       "      <td>Designer Arte Plus Studio w Netflix IdealHub 02</td>\n",
       "      <td>27.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1050</th>\n",
       "      <td>Comfort Service Apartment at The Face KLCC</td>\n",
       "      <td>53.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1640</th>\n",
       "      <td>Extremeli Suites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Very good</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   name  price  \\\n",
       "1438                              Summer Suites Studios    NaN   \n",
       "1557  EightyOne Newport Boulevard Condotel CLUSTER 1-7N   39.0   \n",
       "216               Back Kuromon Ichiba AFP Apartment(61)   33.0   \n",
       "176            seadream tsurumi by yokotani kikaku No.3   31.0   \n",
       "1747                  Honeymoon Business Queen Suite33C   52.0   \n",
       "1417                          M City Lake View 1+1 Room   61.0   \n",
       "603   7mins to Shibuya station/Romantic Room / Room No1  159.0   \n",
       "1035    Designer Arte Plus Studio w Netflix IdealHub 02   27.0   \n",
       "1050         Comfort Service Apartment at The Face KLCC   53.0   \n",
       "1640                                   Extremeli Suites    NaN   \n",
       "\n",
       "                  type  bedroom_count  bed_count  review_count  \n",
       "1438  Entire apartment            NaN        NaN           NaN  \n",
       "1557  Entire apartment            NaN        1.0           NaN  \n",
       "216   Entire apartment            NaN        2.0           NaN  \n",
       "176   Entire apartment            NaN        1.0           NaN  \n",
       "1747  Entire apartment            NaN        1.0           NaN  \n",
       "1417  Entire apartment            2.0        4.0           4.0  \n",
       "603   Entire apartment            NaN        1.0           NaN  \n",
       "1035  Entire apartment            NaN        1.0           NaN  \n",
       "1050  Entire apartment            1.0        1.0          14.0  \n",
       "1640        Very good             NaN        NaN           NaN  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(10,random_state=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "477d9d72",
   "metadata": {},
   "source": [
    "# deal with null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cc6bd018",
   "metadata": {},
   "outputs": [],
   "source": [
    " \n",
    "df['bedroom_count'].fillna(df['bedroom_count'].mode()[0], inplace=True)\n",
    "df['bed_count'].fillna(df['bed_count'].mode()[0], inplace=True)\n",
    "df['review_count'].fillna(df['review_count'].mode()[0], inplace=True)\n",
    "df['price'].fillna(df['price'].median(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7f11cbef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name             0\n",
       "price            0\n",
       "type             0\n",
       "bedroom_count    0\n",
       "bed_count        0\n",
       "review_count     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3c96c014",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name              object\n",
       "price            float64\n",
       "type              object\n",
       "bedroom_count    float64\n",
       "bed_count        float64\n",
       "review_count     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24730bfd",
   "metadata": {},
   "source": [
    "-------\n",
    "# Take Alook "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3c14c601",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>price</th>\n",
       "      <th>type</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1198</th>\n",
       "      <td>AR Homestay condominium</td>\n",
       "      <td>94.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2228</th>\n",
       "      <td>Ken Bangsar Serviced Residences (10-6)</td>\n",
       "      <td>178.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>489</th>\n",
       "      <td>GATE STAY Akihabara East</td>\n",
       "      <td>69.0</td>\n",
       "      <td>Exceptional</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2072</th>\n",
       "      <td>Empire Damansara @ Johannesburg by Cities Homes</td>\n",
       "      <td>41.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1771</th>\n",
       "      <td>Staycation@Shell Residences</td>\n",
       "      <td>80.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1119</th>\n",
       "      <td>Heritage LakeView+ 100MBPs Wifi, TV &amp; Pool</td>\n",
       "      <td>29.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2174</th>\n",
       "      <td>Empire Damansara @ Texas by Cities Homes</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1540</th>\n",
       "      <td>Mezza II Residences Unit # 4133</td>\n",
       "      <td>24.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>Namba South LAMU Japanese villa max 10/Tsutenkaku</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1122</th>\n",
       "      <td>QracSuite Petaling Jaya by QRACHOME</td>\n",
       "      <td>52.0</td>\n",
       "      <td>Entire apartment</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   name  price  \\\n",
       "1198                            AR Homestay condominium   94.0   \n",
       "2228             Ken Bangsar Serviced Residences (10-6)  178.0   \n",
       "489                            GATE STAY Akihabara East   69.0   \n",
       "2072    Empire Damansara @ Johannesburg by Cities Homes   41.0   \n",
       "1771                        Staycation@Shell Residences   80.0   \n",
       "1119         Heritage LakeView+ 100MBPs Wifi, TV & Pool   29.0   \n",
       "2174           Empire Damansara @ Texas by Cities Homes   35.0   \n",
       "1540                    Mezza II Residences Unit # 4133   24.0   \n",
       "130   Namba South LAMU Japanese villa max 10/Tsutenkaku   92.0   \n",
       "1122                QracSuite Petaling Jaya by QRACHOME   52.0   \n",
       "\n",
       "                  type  bedroom_count  bed_count  review_count  \n",
       "1198  Entire apartment            3.0        4.0           6.0  \n",
       "2228  Entire apartment            1.0        3.0           1.0  \n",
       "489       Exceptional             1.0        1.0           1.0  \n",
       "2072  Entire apartment            1.0        1.0           1.0  \n",
       "1771  Entire apartment            1.0        1.0           1.0  \n",
       "1119  Entire apartment            1.0        1.0           1.0  \n",
       "2174  Entire apartment            1.0        1.0           1.0  \n",
       "1540  Entire apartment            1.0        1.0           1.0  \n",
       "130   Entire apartment            1.0        3.0           1.0  \n",
       "1122  Entire apartment            1.0        1.0           1.0  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31382f0b",
   "metadata": {},
   "source": [
    "#  drop unnecessry columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bef4f24d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop('name', axis=1, inplace=True)\n",
    "df.drop('type', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "520477f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2247, 4)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "637baa62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2247.000000</td>\n",
       "      <td>2247.000000</td>\n",
       "      <td>2247.000000</td>\n",
       "      <td>2247.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>62.451713</td>\n",
       "      <td>1.104584</td>\n",
       "      <td>1.697819</td>\n",
       "      <td>11.959057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>70.670376</td>\n",
       "      <td>0.399478</td>\n",
       "      <td>1.302067</td>\n",
       "      <td>65.225509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>63.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>782.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>988.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             price  bedroom_count    bed_count  review_count\n",
       "count  2247.000000    2247.000000  2247.000000   2247.000000\n",
       "mean     62.451713       1.104584     1.697819     11.959057\n",
       "std      70.670376       0.399478     1.302067     65.225509\n",
       "min       5.000000       1.000000     1.000000      1.000000\n",
       "25%      31.000000       1.000000     1.000000      1.000000\n",
       "50%      45.000000       1.000000     1.000000      1.000000\n",
       "75%      63.000000       1.000000     2.000000      1.000000\n",
       "max     782.000000       4.000000    18.000000    988.000000"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af5780b7",
   "metadata": {},
   "source": [
    "------\n",
    "## deal with outlier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5d2a8ea9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mahmoudahmed/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='price', ylabel='Density'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c80132be",
   "metadata": {},
   "outputs": [],
   "source": [
    "q = df['price'].quantile(0.99)\n",
    "df = df[df['price']<q]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7c81ce88",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mahmoudahmed/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='price', ylabel='Density'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c1715c2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='bedroom_count', ylabel='Density'>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['bedroom_count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ab6354f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='bed_count', ylabel='Density'>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['bed_count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "cae07f52",
   "metadata": {},
   "outputs": [],
   "source": [
    "q = df['bed_count'].quantile(0.99)\n",
    "df = df[df['bed_count']<q]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e1ecd01a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='bed_count', ylabel='Density'>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['bed_count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0af466f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='review_count', ylabel='Density'>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['review_count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5c6b3a4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "q = df['review_count'].quantile(0.99)\n",
    "df = df[df['review_count']<q]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7bf8dc74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='review_count', ylabel='Density'>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['review_count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "793fc793",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2035.000000</td>\n",
       "      <td>2035.000000</td>\n",
       "      <td>2035.000000</td>\n",
       "      <td>2035.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>50.997543</td>\n",
       "      <td>1.072727</td>\n",
       "      <td>1.534644</td>\n",
       "      <td>2.420639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>32.500715</td>\n",
       "      <td>0.317652</td>\n",
       "      <td>0.927115</td>\n",
       "      <td>5.850142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>57.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>209.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>53.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             price  bedroom_count    bed_count  review_count\n",
       "count  2035.000000    2035.000000  2035.000000   2035.000000\n",
       "mean     50.997543       1.072727     1.534644      2.420639\n",
       "std      32.500715       0.317652     0.927115      5.850142\n",
       "min       5.000000       1.000000     1.000000      1.000000\n",
       "25%      31.000000       1.000000     1.000000      1.000000\n",
       "50%      45.000000       1.000000     1.000000      1.000000\n",
       "75%      57.000000       1.000000     2.000000      1.000000\n",
       "max     209.000000       4.000000     5.000000     53.000000"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4afef7b",
   "metadata": {},
   "source": [
    "## find duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e8e65084",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>43.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>43.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2242</th>\n",
       "      <td>49.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2243</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2244</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2245</th>\n",
       "      <td>106.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2246</th>\n",
       "      <td>127.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1500 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      price  bedroom_count  bed_count  review_count\n",
       "20     45.0            1.0        1.0           1.0\n",
       "26     43.0            1.0        1.0           1.0\n",
       "27     43.0            1.0        1.0           1.0\n",
       "30     45.0            1.0        1.0           1.0\n",
       "35     45.0            1.0        1.0           1.0\n",
       "...     ...            ...        ...           ...\n",
       "2242   49.0            1.0        1.0           1.0\n",
       "2243   45.0            1.0        1.0           1.0\n",
       "2244   56.0            1.0        1.0           1.0\n",
       "2245  106.0            1.0        1.0           1.0\n",
       "2246  127.0            1.0        2.0           1.0\n",
       "\n",
       "[1500 rows x 4 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5f0a17df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2035, 4)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "14dc4a9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>32.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>43.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2193</th>\n",
       "      <td>89.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2204</th>\n",
       "      <td>198.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2228</th>\n",
       "      <td>178.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2239</th>\n",
       "      <td>208.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2240</th>\n",
       "      <td>109.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>535 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      price  bedroom_count  bed_count  review_count\n",
       "1      35.0            1.0        1.0           1.0\n",
       "3      32.0            1.0        1.0           1.0\n",
       "4      73.0            1.0        3.0          16.0\n",
       "6      45.0            1.0        1.0           1.0\n",
       "8      43.0            1.0        1.0           1.0\n",
       "...     ...            ...        ...           ...\n",
       "2193   89.0            1.0        1.0           1.0\n",
       "2204  198.0            1.0        3.0           1.0\n",
       "2228  178.0            1.0        3.0           1.0\n",
       "2239  208.0            1.0        1.0           1.0\n",
       "2240  109.0            1.0        1.0           1.0\n",
       "\n",
       "[535 rows x 4 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d688e828",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2035, 4)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "7102bb08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2045</th>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1745</th>\n",
       "      <td>40.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1249</th>\n",
       "      <td>73.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2243</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>42.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>463</th>\n",
       "      <td>75.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387</th>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1397</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1974</th>\n",
       "      <td>20.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>13.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      price  bedroom_count  bed_count  review_count\n",
       "2045   28.0            1.0        1.0           1.0\n",
       "1745   40.0            1.0        1.0           1.0\n",
       "1249   73.0            1.0        2.0           1.0\n",
       "2243   45.0            1.0        1.0           1.0\n",
       "17     42.0            1.0        1.0           1.0\n",
       "463    75.0            1.0        1.0           2.0\n",
       "387    22.0            1.0        1.0           1.0\n",
       "1397   37.0            1.0        1.0           1.0\n",
       "1974   20.0            1.0        1.0           1.0\n",
       "2015   13.0            1.0        1.0           1.0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "01428ade",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    1919\n",
       "2.0      86\n",
       "3.0      28\n",
       "4.0       2\n",
       "Name: bedroom_count, dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['bedroom_count'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "39cae6a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bedroom_count  counts\n",
       "0            1.0    1919\n",
       "1            2.0      86\n",
       "2            3.0      28\n",
       "3            4.0       2"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_bedroom_count = df.groupby(['bedroom_count']).size().reset_index(name='counts')\n",
    "common_bedroom_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "4c0770a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,5)) \n",
    "plt.title(\"Most Common Bedroom Count\", fontsize=18) \n",
    "plt.bar(common_bedroom_count[\"bedroom_count\"], common_bedroom_count[\"counts\"],color= '#99ff99',edgecolor='green', linewidth = 1)\n",
    "plt.xlabel(\"Bedroom Count\",fontsize=15) \n",
    "plt.ylabel(\"Frquency\",fontsize=15) \n",
    "plt.xticks(fontsize=12, rotation=90)\n",
    "plt.yticks(fontsize=12)\n",
    "for k,v in common_bedroom_count[\"counts\"].items(): \n",
    "        plt.text(k,v+300,str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "71a0e7d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    1387\n",
       "2.0     354\n",
       "3.0     183\n",
       "4.0      76\n",
       "5.0      35\n",
       "Name: bed_count, dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['bed_count'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "930bf9df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bed_count</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bed_count  counts\n",
       "0        1.0    1387\n",
       "1        2.0     354\n",
       "2        3.0     183\n",
       "3        4.0      76\n",
       "4        5.0      35"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_bed_count = df.groupby(['bed_count']).size().reset_index(name='counts')\n",
    "common_bed_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "b352faff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA5IAAAGGCAYAAAAJqb62AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAA3xklEQVR4nO3deZhcVZ3/8feXJBBM0myJKEtAQBbRsPzCqOgAShBEVATUyDgSYUxcUFQEF5YkCA7BwQVhJCgQllEBBYyAsgkMOooEIUCUVQTCGgKEdAgI4fv7496ORdGd9CWVruqu9+t56qm659y699vdBelPn3PPjcxEkiRJkqTeWqXZBUiSJEmS+heDpCRJkiSpEoOkJEmSJKkSg6QkSZIkqRKDpCRJkiSpEoOkJEmSJKkSg6QkSZIkqRKDpCRJkiSpEoOkJEmSJKkSg6QkSZIkqZJeBcmI+FJEbLiyi5EkSZIktb7IzOXvFPESsAT4X2AG8IvMfHblliZJkiRJakW9ndq6CHgjRZCcDDwaEWdGxM4rrTJJkiRJUkvq7YjkM5nZUbP9r8AngA8DTwFnZeaUlVWkJEmSJKl1vKogWdM+FNgH+ERm7rES6pMkSZIktZjeBsmFmTmiD+qRJEmSJLW43l4j+aaVWoUkSZIkqd/o1Yhkj2+OWDszn2xgPZIkSZKkFtfb+0i+PiJ+HhF/jYgTI2LNiPgj8EREPBgRY1dynZIkSZKkFtHbqa2nAs8ChwKvA64GLgHWAn4IfGelVCdJkiRJajm9XWznCWC9zPxHRLwGeBoYlpkvRMQQ4LHMXHvllipJkiRJagW9HZF8Eei6/ccawGDgNeX26sALDa5LkiRJktSiejsieSrwVuBy4J3AA8BqwAzgE8DzmfnxlVemJEmSJKlV9DZIrgp8EdgYOB24i+K6yTHAjcBXXL1VkiRJktrDCt3+Q5IkSZLUfnp7jeQrRMTIiNimHK2UJEmSJLWJ3t5HcquImB0RnRHx9YjYE7gD+APwt4h480qtUpIkSZLUMnp7jeQVwK+Al4DvAwcD04FBFPeQ3CQz91qJdUqSJEmSWkRvg+R8YCRFcHwWWCMzF5d9HcDdmbnuyixUkiRJktQaenuNZGThRWBRV4gsdVLcS1KSJEmS1AZ6GyTvjYjRAJm5Vl3fGOChhlYlSZIkSWpZvQ2SnwCe7qFvJHBUQ6qRJEmSJLW8XgXJzPxrZj7TQ/c1wJsaV5IkSZIkqZX1arGdZR4gYjXg2cwc1JiSJEmSJEmtbHBvdoqIM1b0GJIkSZKkgaG3IXB/4HTgyW76HImUJEmSpDbS2/tI3gh8MzNndtM3lGJqa28X7pEkSZIk9WO9DX8zlrHvC8DUhlQjSZIkSWp5K7zYjiRJkiSpvTgdVZIkSZJUiUFSkiRJklSJQVKSJEmSVIlBUpIkSZJUiUFSkiRJklSJQVKSJEmSVIlBUpIkSZJUiUFSkiRJklSJQVKSJEmSVIlBUpIkSZJUiUFSkiRJklSJQVKSJEmSVIlBUpIkSZJUiUFSkiRJklSJQVKSJEmSVIlBUpIkSZJUiUFSkiRJklSJQVKSJEmSVIlBUpIk9YmI2CUiMiImNLsWSdKKMUhK0gBV80t7RsTJPezz2oj4R7nPtX1Qz5SIWPNVvHfziPjviLgjIhZFxOKIuCsiTouIHVZCuQNezWej6/FiRDwUEb+OiPc0u74uEbF+RJwQEbdGxMKIeD4i/h4R50bErs2ur15EbFt+zjdudi2StDINbnYBkqSV7jlg/4g4NDOfr+v7dyCAF/ugjl2AycAM4OnevikiDgJ+SPF1/BS4haLezYF9gU9FxNaZ+ZeGVtsebgFOLF8PATYG/gO4PCL2zcwLm1QXABHxPoqf+WrABcBpwGKKOvcGroqI92XmZc2qsRvbUnzOrwX+3sxCJGllMkhK0sB3EfAx4IPA+XV9nwQuA1puZAcgIsZRhIe/ALtn5sN1/V8HPt+M2gaIhzLz3NqGiPgFMBs4AGhakIyIrSnC45PAbpn517r+o4F/o/gDgySpjzm1VZIGvj9TBINP1jZGxL8AWwNn9vTGiNg7In4fEZ3l4/cR8cFu9tuxnBL5aEQ8V06RvCwi3lb2z6AYpQG4r2Y65ZTl1D6NYsT0o/UhEiAzX8zM79aORkbEsIj4z4i4t5wG+WhEnB0RG9XVvPR6vYj4bETcWdZ+WzkSRkS8JSJ+ExHPRMT8iDgpIobUHefacqrlxhFxUUQ8HRFPRcSMiBgeEatExDci4r7y+H+OiHd08z18NXV/MiLmlPvfHxGHL+f72Rtd3+d/dFPj2PJrfKI8550RcUREvOIP0xHxwYi4ufyaH4yIYyhGPXvrGGB14D/qQyRAFs7NzN/WnHNwRHw1Iv5Snnd+We9b6mrr8VrN8ueWdW1dP+P1IuKn5c93UURcHhGb1+w3hX/+93RNzed8RoWvW5L6BUckJak9nAl8JyI2yMy5ZduBwOPAJd29ISI+C5wC3AEcCyQwAbg4IiZl5mnlflsAVwKPAt8HHgNeB7wD2Ab4IzAd6AA+BHwJeKI8za09FRwRbwC2B67v7bTVMtBcXp775xTTNt8IfAZ4T0SMrfn6u3wOWAv4McXo1hfKr/HDwI8oplZeDLyHYvTz8fL7UWsY8Fvgf4GvATtQfH+HAvOBtwI/oAhSXwF+FREbZebCFaj708C6wOkUU4U/DkyLiLmZ+ZPefL+AIRExsnw9GNgIOApYUh53qYjYk2J0+56yvieBt1MEvm2BD9fs+yHgFxRTO4+hmIr8SWCv3hQVEUOB9wEPZuZvevm1APwP8BGKz+MPKT6HnwP+EBH/mpk3VzhWvWEUP98/At8A3gAcAvwyIt6cmUsoRnBfD0wEvgV0BeB7V+C8ktSaMtOHDx8+fAzAB8U1iUkRXNYBnge+UfatThE+/qvc7gSurXnvWmXbPUBHTXsHxS/FC4E1y7YvlOf5l+XUM6Xcb+Ne1v/+cv+TKnzNnyrfc0Jd+/vK9nO6+f48BKxR0z6mbH8J2KfuODcBj9S1XVvuf1hd+4XlMWYBQ2raP1DuP2kF636462dQtr8GmAf8oZffq+zh8STwgbp9h1L8oeB/gcF1fV8q37dLuT0IeIDijwUja/ZbA7i/3HfCcmp7S7nfzAo/+93K95wHRN3P80WKP0jUfw9fUQfFNbzZw8/48Lr2w8r23WvaJtR+P3z48OFjoD6c2ipJbSAz5wMzKX7JBdiH4hf7M3p4y24UIzAnZeYzNcd5hmJkbTgwrmxeUD5/sBxJapSO8vmZZe71ch+iCG//WduYmZdSLCzzwYio/7dvRmYuqNn31vKcD+crF5v5HfC6iBhe176E4vtS63qKabmnZuYLde1QjDiuSN1nZubTNfs+SzFa9kZ67waKn/VuwB4UI2kPAD+LiN1r9tuNYvTzTGDNiBjZ9aC4xhaKEVuA/wdsWNbXNfJM+T0+tZd1vdqfPcBxmbl0amr587wEeGdEjKpwvHovASfVtXVNq63yPZekAcEgKUnt40zgjRHxToppl3/KnqeMvqF8ntNN3+3l8ybl88+Aqyim+z0ZEb8tr1PbqJv3VtEVIkZUeM8bKALgU930zSmPNbKu/W/d7PsUcF8P7VCM8NZ6JDPrF33p2vdlx6mprfYYjap7fje1LcsTmXlV+bg8M38E7EQx4vyjmutBtyqfz6AY9ax93FH2rVs+d30uutpr9XZl3Vf7s3+Jf04nrXV7zT6v1sPd/Iznl89VvueSNCB4jaQktY/LKaZxTgbeRXH9XU+itwfN4pYiu0WxeM/uFEHkGGBKROyfmRe9ynq7fvnfrsJ7el13jSUV27s7z7L27akvenjdW8s656uWmc9ExB8oVvl9I0X466rvMIoR0u50LdLTtW92s09vv867KaZib9vL/ascG7qvrUtPvxtV+TxI0oDniKQktYksFgM5m2JK6nMUI4k96VocZOtu+t5UPr9sRCwz/5SZ38zM3YDNgEW8fFGaZf3y3l299wE3A++IiC17+bZ7gfUiYs0e6n6Gfy7000pare6ukciuEcG7y+dFNSOY9Y+u0cauz85WvFJ3ba9QjvxdBoyOiPcsb/+a867Swzm6PrNdo8NPls9rd7PvJt20VVHpcy5J/ZVBUpLay6nAVODTtdcFduNKiiD4+YhYOr2wfP15ioV4rizb6qdcAsylmPZY+4t6Z/nc3S/vPflq+fyziHhdfWdEDIqIL0ZEV1C4mOLftq/V7fdeipHNmZn5UoXz95WLaZG6y+sId6T4Y0NXOLycYrXar0XEK35+EbF6zefkJoqf/ydrPxsR0UGx0mxvHQ0sBn5crgzcXa37R8S7y82Ly+evR0TU7PNmigWOfpeZ88rm+ygW4Om6zrdr3x2Bt1WosTuv5nMuSf2OU1slqY1k5gMUq6cub7+ny3sSngLcUHMfvAkUo42TaoLokeWo0SUUv6AHxYqrWwIn1Bz2j+XztIj4H4qgcntm3k4PMvPKiJhIcSuHOyPipxRTK18s69gX2BR4c/mWGcABwFcjYmOKVUY3Az5LcVuSbyzva2+SGTSn7vUj4uPl60HAaOAgYE3giCxvT5KZiyLiExRh7c6IOINiRd81KX7O+1AsdnNtZi6JiC8B5wN/iogfUfy8DqS4pnB0bwrLzNvLW7D8FJgdEedTLA60mOI2JR+kuL3Me8v9ryz3GQ+sFRGX8M/bf3Td1qXr2J3lZ/o/ys/UtRTTeD9JcUuabXr37evWjRTXah4REWtR/EHmvsy8YQWOKUktxyApSepWZv53RDxCcV3c5LJ5NvChzLy4ZteLKe6d9xGKBVcWU0yF/BQ19yLMzN9HxFcpRqV+RPFv0FT+eS1kT3WcHhG/A74I7Ap8gmL07n6KVTM/0jWtMjNfKFcbPRL4KEXAeRq4ADgyMx+s/p1Y+ZpY97bAOTXbCymC+tcy82VTnzPz8ojYgWLU9OPAKIoFhe4FvkPNPUEz8+cRsR/FqOIUitHMGRQB+YreFpeZl0bEVhQ/+z0ovi9DKK7H/B3wxcy8tuYt/wb8meIPHidShLjrgKMy87a6w3+pfN6HIpT+meIPIBNZgSCZmQ9ExIEUo+k/LOs9iyIES9KAETUrZEuSJEmStFxeIylJkiRJqsQgKUmSJEmqxCApSZIkSarEIClJkiRJqsRVW5dh5MiRufHGGze7DEmSJElqiptuuumJzBxV326QXIaNN96YWbNmNbsMSZIkSWqKiLi/u3antkqSJEmSKjFISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqaakgGREHR8SsiHg+Imb0sM/kiMiIGFfTFhExLSLml48TIiJq+jeOiGsi4tmIuKP2vZIkSZKkaloqSAIPA8cCZ3TXGRGbAvsBj9R1TQT2BrYBxgB7AZNq+n8K3AysAxwB/DwiXnEvFEmSJEnS8rVUkMzMCzPzYmB+D7ucDHwV+Edd+wHAiZk5NzMfAk4EJgBExObA9sDkzFycmb8AbgP2bfxXIEmSJEkDX0sFyWWJiA8D/8jMy7rp3hqYXbM9u2zr6vtbZi7soV+SJEmSVMHgZhfQGxExHPgW8J4edhkOLKjZXgAML6+TrO/r6l+/h3NNpJgqy+jRo1egakmSJEkamPrLiORU4JzMvK+H/k6go2a7A+jMzOymr6t/Id3IzNMyc2xmjh01yssoJUmSJKlevxiRBHYFNoiIz5bbo4DzI2JaZk4D5lAstPOnsn+bso3yeZOIGFEzvXUb4Cd9U3rjbfi9DZm7YG6zy1ATbLDGBjz4xQebXYYkSZLaXEsFyYgYTFHTIGBQRAwFXqQIkkNqdr0R+DLw63L7bODLEXEZkMChwA8AMvOuiLgFmBwRRwLvpVjZtd8utjN3wVymT57e7DLUBJOmTlr+TpIkSdJK1lJBEjgSmFyz/XFgamZOqd0pIpYAT2VmZ9k0HdiEYjVWgB+XbV3GAzOAp4AHgP0yc16ji5ckSZKkdtBSQbIMjFN6sd/GddsJHF4+utv/78AuK1ieJEmSJIn+s9iOJEmSJKlFGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVGCQlSZIkSZUYJCVJkiRJlRgkJUmSJEmVtFSQjIiDI2JWRDwfETNq2t8WEVdGxJMRMS8iLoiI19f0R0RMi4j55eOEiIia/o0j4pqIeDYi7oiIcX38pUmSJEnSgNFSQRJ4GDgWOKOufS3gNGBjYCNgIXBmTf9EYG9gG2AMsBcwqab/p8DNwDrAEcDPI2JUw6uXJEmSpDbQUkEyMy/MzIuB+XXtv87MCzLzmcx8FjgZeEfNLgcAJ2bm3Mx8CDgRmAAQEZsD2wOTM3NxZv4CuA3Yd6V/QZIkSZI0ALVUkKxgJ2BOzfbWwOya7dllW1ff3zJzYQ/9LxMRE8vptbPmzZvXwJIlSZIkaWDod0EyIsYARwOH1TQPBxbUbC8AhpfXSdb3dfWP6O74mXlaZo7NzLGjRjn7VZIkSZLq9asgGRGbAb8GDsnM62u6OoGOmu0OoDMzs5u+rv6FSJIkSZIq6zdBMiI2Aq4CvpmZ59R1z6FYaKfLNvxz6uscYJOIGNFDvyRJkiSpgpYKkhExOCKGAoOAQRExtGxbH/gtcEpmntrNW88GvhwR60fEesChwAyAzLwLuAWYXB7vQxQru/5i5X9FkiRJkjTwDG52AXWOBCbXbH8cmAoksAlFGFzan5nDy5fTy/7byu0fl21dxlMEy6eAB4D9MtOVdCRJkiTpVWipIJmZU4ApPXRPXcb7Eji8fHTX/3dglxUqTpIkSZIEtNjUVkmSJElS6zNISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqMUhKkiRJkioxSEqSJEmSKjFISpIkSZIqMUhKkiRJkippqSAZEQdHxKyIeD4iZtT17RoRd0TEsxFxTURsVNMXETEtIuaXjxMiImr6Ny7f82x5jHF9+GVJkiRJ0oDSUkESeBg4FjijtjEiRgIXAkcBawOzgPNqdpkI7A1sA4wB9gIm1fT/FLgZWAc4Avh5RIxaKV+BJEmSJA1wLRUkM/PCzLwYmF/XtQ8wJzMvyMzngCnANhGxZdl/AHBiZs7NzIeAE4EJABGxObA9MDkzF2fmL4DbgH1X9tcjSZIkSQNRSwXJZdgamN21kZmLgHvL9lf0l69r+/6WmQt76JckSZIkVdBfguRwYEFd2wJgRA/9C4Dh5XWSy3vvy0TExPI6zVnz5s1b4cIlSZIkaaDpL0GyE+ioa+sAFvbQ3wF0Zmb24r0vk5mnZebYzBw7apSXUUqSJElSvf4SJOdQLKQDQEQMAzYt21/RX76u7dskIkb00C9JkiRJqqClgmREDI6IocAgYFBEDI2IwcBFwJsjYt+y/2jg1sy8o3zr2cCXI2L9iFgPOBSYAZCZdwG3AJPL432IYmXXX/Tl1yZJkiRJA0VLBUngSGAx8DXg4+XrIzNzHsUqq8cBTwFvBcbXvG868CuK1VhvBy4t27qMB8aW7z0e2K88piRJkiSposHNLqBWZk6huLVHd31XAVv20JfA4eWju/6/A7s0oERJkiRJanutNiIpSZIkSWpxBklJkiRJUiUGSUmSJElSJQZJSZIkSVIlBklJkiRJUiUGSUmSJElSJQZJSZIkSVIlBklJkiRJUiUGSUmSJElSJQZJSZIkSVIlBklJkiRJUiUGSUmSJElSJQZJSZIkSVIlDQuSEbF2o44lSZIkSWpdjRyRfCQizo+I90aEI52SJEmSNEA1MvB9GngtcAnwYER8KyK2aODxJUmSJEktoGFBMjPPzMxdgDcCpwMfA/4SEb+PiIMiYnijziVJkiRJap6GT0HNzL9l5tGZ+QZgN2AJcBrwaETMiIjtG31OSZIkSVLfWSnXMkbEayJiAnA08E7gL8B3ga2AGyPisJVxXkmSJEnSytfQIBkRO0XEmcCjwPeBO4G3ZeZbMvOozHwr8HXga408ryRJkiSp7zTy9h/3AtcAmwFfAF6fmZMy8091u14NrNWo80qSJEmS+tbgBh7rF8CPM/OuZe2UmTexkqbUSpIkSZJWvoYFycw8vFHHkiRJkiS1rkZObT0uIqb30HdqRHyzUeeSJEmSJDVPI6eYfgy4voe+64H9G3guSZIkSVKTNDJIrgc81EPfw2W/JEmSJKmfa2SQfBTYvoe+7YF5DTyXJEmSJKlJGhkkzweOjoj31TZGxJ7AUcDPVvQEEbFxRFwWEU9FxKMRcXJEDC77do2IOyLi2Yi4JiI2qnlfRMS0iJhfPk6IiFjReiRJkiSpHTUySB4N3AD8KiLmRcStETEP+BXwB4owuaL+G3gceD2wLbAz8NmIGAlcWJ5jbWAWcF7N+yYCewPbAGOAvYBJDahHkiRJktpOI2//8RzwnojYHXgXsA4wH7g6M69s0GneAJxcnuvRiPgNsDWwDzAnMy8AiIgpwBMRsWVm3gEcAJyYmXPL/hOBTwGnNqguSZIkSWobDQuSXTLzcuDyRh+39H1gfERcC6wFvJdiFHIXYHZNDYsi4l6KkHlH+Ty75jizyzZJkiRJUkUND5IRsRqwPjC0vi8z/7KCh7+OYiTxGWAQcBZwMcVU1frFfBYAI8rXw8vt2r7hERGZmXX1T6SYCsvo0aNXsFxJkiRJGngado1kRKwXEZcAzwJ3A7fVPG4vn1fk+KtQjHReCAwDRlKMSk4DOoGOurd0AAvL1/X9HUBnfYgEyMzTMnNsZo4dNWrUipQsSZIkSQNSI0ckf0xxm48vA38B/tHAY0OxiM6GFNdIPg88HxFnAscCJ1FcBwlARAwDNgXmlE1zKBba+VO5vU1NnyRJkiSpgkYGyXcAn8rM8xt4zKUy84mIuA/4TET8F8V01QMorne8CPh2ROwLXEqxguyt5UI7AGcDX46Iy4AEDgV+sDLqlCRJkqSBrpG3/3gcWNzA43VnH2APiush7wFeBL6UmfOAfYHjgKeAtwLja943neI2JF3TbC8t2yRJkiRJFTVyRPJo4KsRcV1mPtPA4y6VmbdQrNDaXd9VwJY99CVwePmQJEmSJK2ARgbJfYDRwP0RcSPwdF1/ZuZHG3g+SZIkSVITNDJIjgTuLV8PAVzyVJIkSZIGoIYFycx8V6OOJUmSJElqXY1cbGepKKwXEY0c8ZQAePKBJ+nmFqCSJEmS+khDg2RE7BkRNwDPAQ8CY8r2H0XExxt5LrWv4992PJ1PdDa7DEmSJKltNWzEMCI+AZwB/A/w38CZNd13AQcB5zbqfBr4vjb6a922L3x8IcdudyyxSnD8A8f3cVWSJEmSGjn19Ajg25n59YgYxMuD5BzgKw08l9rAqq9ZlTVetwZ7fH0PhgwdAkBmMn3f6Yz/wXiGrT2syRVKkiRJ7amRU1s3Aq7soe85oKOB51IbmHzbZLbabSsu+PIFLF6wmM133pwtdtmCQasOYtN3bMrmO2/e7BIlSZKkttTIIPkgsF0PfWOBexp4LrWBQUMGsecRe3LwJQdz/Y+u5wd7/oB5984jIppdmiRJktTWGjm19XRgckQ8BlxctkVE7AocDhzTwHOpjYx8w0gO/tXB3HzRzZz03pNYNH9Rs0uSJEmS2lojg+Q0YEPgLGBJ2fZ/wCBgemae1MBzqQ1t96Ht2Hr3rXns7scYvs7wZpcjSZIkta2GBcksbuz3uYj4LrArsA7wJPDbzLyrUedRe3vppZcYtckoVhm0Um6BKkmSJKkXGjkiCUBm3oPXQ6oBLjvuMvY8Yk8AOud3cvq/nc5fr/grBGzxri046CcH0fFa13CSJEmS+loj7yO55/L2yczLGnU+DXyXT7t8aZD8xWG/YOiIoZzwyAkAnHfIeVx4+IVMmDGhiRVKkiRJ7amRI5KXAAnUL6mZNa8HNfB8GuCK2dKFv171V4646QhGjBoBwMdO+RjfHPPNZpUmSZIktbVGBsk3dNO2NvAeYALwyQaeS20gIshM8qWEhGHrDFvaN2ztYSx+ZnETq5MkSZLaVyMX27m/m+b7gZsjYgnwDeADjTqfBr7nO5/nM4M/s3Sce+4tcxm9/WgAHr/78aWjk5IkSZL6VsMX2+nBzcCUPjqXBojj7jvuZdvDR/7zlh/PPv0se39r7z6uSJIkSRLASr+HQkSsSjG19ZGVfS4NLOtstA6LnlzE32/8OyNGjWDI0CFcc/I1nP+l83nmsWfYYfwOzS5RkiRJakuNXLX1Rl6+sA7AqsDGwAi8RlIV/e703/HLI39JRPCb43/Ddvtsx1MPPsVLL77E6fufzke//1HeceA7ml2mJEmS1HYaObV1Dq8Mks8BFwAXZ+acBp5LbeCKb1/BV677CpnJlK2mMP6k8Wy646YAbL/f9lx4+IUGSUmSJKkJGrnYzoRGHUsCWPDIAtbdfF0Ahqw+hE3evsnSvq1224r5989vVmmSJElSW1vp10hKr9Zqw1ZjyQtLAHj7hLcT8c9blL6w+AVilfpblkqSJEnqC428RvIaXjm1tUeZ+e5GnVsD05a7bsnj9zzO67d6Pfufsv/L+m695FY2GLNBkyqTJEmS2lsjr5F8Ang7sC5wE/A48Fpge+Ax4I8NPJfawIHnHNhj35bv3pKtdt2qD6uRJEmS1KWRQfI3wBbAjpn5QFdjRIwGLgGuyMwfNfB8amMjRo1odgmSJElS22rkNZJHAEfXhkiAcnsy8I0GnkuSJEmS1CSNDJKvA1broW81immukiRJkqR+rpFB8lpgWkSMrW2MiB2AacB1jThJRIyPiL9GxKKIuDci/rVs3zUi7oiIZyPimojYqOY9ERHTImJ++TghapcAlSRJkiT1WiOD5ETgSeCGiHg4Im6JiIcpFtl5suxfIRGxG0Uo/SQwAtgJ+FtEjAQuBI4C1gZmAefV1bY3sA0wBtgLmLSi9UiSJElSO2rYYjuZORfYPiL2BHagmOr6KHBjZl7WoNNMBY7JzK4VYB8CiIiJwJzMvKDcngI8ERFbZuYdwAHAiWWNRMSJwKeAUxtUlyRJkiS1jYYEyYgYCswEvlWGxkYFx9pzDALGAjMj4h5gKHAxcBiwNTC7a9/MXBQR95btd9T3l6+37uE8EylHT0ePHt3oL0OSJEmS+r2GTG3NzOcoRiEHNeJ4PVgXGALsB/wrsC2wHXAkMBxYULf/Aorpr3TTvwAY3t11kpl5WmaOzcyxo0aNaugXIEmSJEkDQSOvkZxJcR3iyrK4fP5BZj6SmU8A3wH2BDqBjrr9O4CF5ev6/g6gMzNzJdYrSZIkSQNSw66RBC4Hvh0Rr6eY2voY8LKgtiLXSmbmUxExt/6YpTkU10ECEBHDgE3L9q7+bYA/ldvb1PRJkiRJkipoZJA8t3zep3zUS1Z86uuZwOcj4jfAC8AXgUuAiyhC7L7ApcDRwK3lQjsAZwNfjojLyjoOBX6wgrVIkiRJUltaoSAZEVcAn8/MO4E3AAHsCtzAP6eVNtI3gZHAXcBzwPnAcZn5XBkiT6YItDcA42veNx3YBLit3P5x2SZJkiRJqmhFRyTHAWsAZOb95cqqpwE7ZOb9K1pcvcx8Afhs+ajvuwrYsof3JXB4+ZCkZXrppZc46aSTuOeee5g0aRLrrrsun/nMZ/jb3/7GuHHjOO6441h11VWbXaYkSVLTNHJqa5dXrIQqSf3JYYcdxi233MIqq6zCuHHj+PSnP81HPvIRXnjhBY4//ngGDRrE8ccf3+wyJUmSmmZlBElJ6tfOO+88br/9dpYsWcKoUaP4xCc+waabbgrA9ttvz1577WWQlCRJba0RQbK7VVS9rYakfmvhwoWsueaaAIwYMWJpiAR405vexLx585pUmSRJUmtoRJC8PCJerGu7ups2MvO1DTifJK1UI0eO5JlnnqGjo4NTTz31ZX3z5s1j2LBhTapMkiSpNaxokJzakCokqYV84QtfYP78+XR0dPCxj33sZX0zZ85kzz33bFJlkiRJrWGFgmRmGiQlDTiHHHJIj30HHXQQBx10UB9WI0mS1HpWaXYBktSKnnjiCW644QYWL14MwK233sp3vvMdrr766iZXJkmS1HwGSUmq88tf/pKNNtqI97///WyxxRb8+te/Zo899uD666/nox/9KN/73veaXaIkSVJTGSQlqc4RRxzBBRdcwOOPP85JJ53Ehz/8YWbOnMlFF13ElVdeycknn9zsEiVJkprKIClJdR588MGlC+p84AMf4Pnnn2fs2LEAbLfddt7+Q5IktT2DpCTVWX/99bniiisAuPTSSxk6dCg333wzALNnz+a1r/VORpIkqb014j6SkjSgTJkyhfe///2stdZabLXVVnz/+99nt912Y+edd+b6669nypQpzS5RkiSpqQySklTnIx/5CO985zuZO3cuY8eOZZVVVmH06NHMnj2bQw45hJ122qnZJUqSJDWVQVKSurHeeuux3nrrLd0eN24c48aNY8mSJRxzzDEcffTRTaxOkiSpubxGUpIqePHFF5k6dWqzy5AkSWoqRyQlqc6BBx7YY9+LL77Yh5VIkiS1JoOkJNX5yU9+wkEHHcTaa6/9ir4lS5Y0oSJJkqTWYpCUpDpvectb2H333fnABz7wir7nnnuO448/vglVSZIktQ6vkZSkOhMmTOCll17qtm/IkCFMnjy5jyuSJElqLY5ISlKdz33ucz32DRo0yCApSZLaniOSkiRJkqRKDJKSJEmSpEoMkpIkSZKkSgySkiRJkqRKDJKSJEmSpEpctVWSpBZ05513csUVVwCw++67s/nmmze5IkmS/skRSUmSWsAuu+zCzTffDMCFF17I2LFjufLKK7nyyivZYYcdmDlzZpMrlCTpn/pdkIyIN0bEcxFxbk3brhFxR0Q8GxHXRMRGNX0REdMiYn75OCEiojnVS5LUvdmzZ7PtttsCMHXqVC699FJmzpzJzJkzueyyy/jGN77R3AIlSarR74IkcApwY9dGRIwELgSOAtYGZgHn1ew/Edgb2AYYA+wFTOqjWiVJ6pXBgwfz1FNPAfDwww+z4447Lu1729vexv3339+s0iRJeoV+FSQjYjzwNHB1TfM+wJzMvCAznwOmANtExJZl/wHAiZk5NzMfAk4EJvRZ0ZIk9cKHP/xhDj74YDo7O/n3f/93/vM//5PM5KWXXuL444/nLW95S7NLlCRpqX4TJCOiAzgGOLSua2tgdtdGZi4C7i3bX9Ffvt4aSZJayIknnsgqq6zCBhtswNVXX83kyZNZffXVec1rXsNZZ53F6aef3uwSJUlaqj+t2vpN4PTMfLDuEsfhwLy6fRcAI2r6F9T1DY+IyMysP0lETKSYDsvo0aMbVLokScu2+uqrc+6553LXXXdxww03MHfuXFZffXXGjBnDTjvtxODB/emfbEnSQNcv/lWKiG2BccB23XR3Ah11bR3Awh76O4DO7kIkQGaeBpwGMHbs2G73kSRpZdl888291YckqeX1l6mtuwAbAw9ExKPAV4B9I+LPwByKhXQAiIhhwKZlO/X95es5SJLUQg455BB+//vfN7sMic7OThYuXLj8HSW1tf4SJE+jCIfblo9TgUuB3YGLgDdHxL4RMRQ4Grg1M+8o33s28OWIWD8i1qO4xnJGn1YvSdJynHLKKbz3ve9ls80245hjjnGVVvWJ4447bunr+fPns8cee9DR0cGaa67JuHHjePzxx5tYnaRW1i+CZGY+m5mPdj0opqs+l5nzMnMesC9wHPAU8FZgfM3bpwO/Am4DbqcIoNP79AuQJGk5Vl99dR599FGOOuoorrvuOjbbbDPe9a53cdZZZ7Fo0aJml6cBatq0aUtfH3bYYYwYMYJHHnmEhx9+mJEjR3L44Yc3sTpJrSx6uFRQFNdIzpo1q9llvEJMDaZPNgu3o0lTJ5GT/W9WGog6Ojp45plnlm4/8MADnH322Zxzzjk8/PDD7LvvvsyYMaN5BWpAGjFixNJprKNHj+amm25i1KhRQDFCOWbMGB566KFmliipySLipswcW9/eL0YkJUlqN6NHj+bII4/kzjvv5PLLL2fo0KHNLkkDUESQmSxZsoTMZJ111lnat/baa7/sjxuSVKtfrNoqSdJAt6wZQjvuuCM77rhjH1ajdtHZ2cngwYPJTCKCW265he233x6Au+++e+nopCTVM0hK6pUNv7chcxfMbXYZaoIN1tiAB7/4YLPLGPBcJVPNcN99971se+TIkUtfP/3003zrW9/q65Ik9RMGSUm9MnfBXK/NbVOTpk5qdgmSVpKNNtqIm2++mXvvvZc999yT1VZbjZNPPpl7772Xd7/73YwfP375B5HUlrxGUpIkqU2dfvrp7LnnnnzhC19gp512Ytq0acyZM4fOzk72339/zjjjjGaXKKlFOSIpSZLUpr797W9z3XXXkZlstdVWnHTSSUuvx91vv/04/PDDOfDAA5tcpaRWZJCUJElqU4888gibb745UNzL9O1vf/vSvt12243777+/WaVJanFObZUkSWpTw4YN44UXXgBgwoQJRMTSvsWLF7PKKv6qKKl7/t9BkiSpTe26667cc889AJxyyikv67vkkksYM2ZMM8qS1A84tVWSJKlNnXPOOT32vfvd72bXXXftw2ok9ScGSUmSJL3CqFGjml2CpBbm1FZJkiRJUiUGSUmSJElSJQZJSZIkSVIlBklJkiRJUiUGSUmSJElSJQZJSZIkSVIlBklJkiRJUiUGSUmSJElSJQZJSZIkSVIlBklJkiRJUiUGSUmSJElSJQZJSZIkSVIlBklJkiRJUiUGSUmSJElSJQZJSZIkSVIlBklJkiRJUiX9JkhGxGoRcXpE3B8RCyPi5oh4b03/rhFxR0Q8GxHXRMRGNX0REdMiYn75OCEiojlfiSRJkiT1b/0mSAKDgQeBnYE1gKOA8yNi44gYCVxYtq0NzALOq3nvRGBvYBtgDLAXMKnPKpckSZKkAWRwswvorcxcBEypabokIu4D/h+wDjAnMy8AiIgpwBMRsWVm3gEcAJyYmXPL/hOBTwGn9t1XIEmSJEkDQ38akXyZiFgX2ByYA2wNzO7qK0PnvWU79f3l662RJEmSJFXWL4NkRAwB/gc4qxxxHA4sqNttATCifF3fvwAY3t11khExMSJmRcSsefPmNb54SZIkSern+l2QjIhVgHOAfwAHl82dQEfdrh3Awh76O4DOzMz642fmaZk5NjPHjho1qqG1S5IkSdJA0K+CZDmCeDqwLrBvZr5Qds2hWEina79hwKZl+yv6y9dzkCRJkiRV1m8W2yn9ENgKGJeZi2vaLwK+HRH7ApcCRwO3ltNeAc4GvhwRlwEJHAr8oO/KliS9Wht+b0PmLpjb7DLUBBussQEPfvHBZpchSepGvwmS5X0hJwHPA4/WXN44KTP/pwyRJwPnAjcA42vePh3YBLit3P5x2SZJanFzF8xl+mT/l92OJk31Tl2S1Kr6TZDMzPuBVyyOU9N/FbBlD30JHF4+JEmSJEkroF9dIylJkiRJaj6DpCRJkiSpEoOkJEmSJKkSg6QkSZIkqRKDpCRJkiSpEoOkJEmSJKkSg6QkSZIkqRKDpCRJkiSpEoOkJEmSJKkSg6QkSZIkqRKDpCRJkiSpEoOkJEmSJKkSg6QkSZIkqRKDpCRJkiSpEoOkJEmSJKkSg6QkSZIkqRKDpCRJkiSpksHNLkCSJKnVbPi9DZm7YG6zy1ATbLDGBjz4xQebXYbU8gySkiRJdeYumMv0ydObXYaaYNLUSc0uQeoXnNoqSZIkSarEIClJkiRJqsQgKUmSJEmqxCApSZIkSarEIClJkiRJqsQgKUmSJEmqxNt/SJIkSS3Ce5i2r/52D1ODpCRJktQivIdp++pv9zB1aqskSZIkqZK2CZIRsXZEXBQRiyLi/ojYv9k1SZIkSVJ/1E5TW08B/gGsC2wLXBoRszNzTlOrkiRJkqR+pi1GJCNiGLAvcFRmdmbm74CZwL83tzJJkiRJ6n8iM5tdw0oXEdsB/5eZq9e0fQXYOTPfX7fvRGBiubkFcGefFareGAk80ewi1Jb87KkZ/NypWfzsqRn83LWmjTJzVH1ju0xtHQ4sqGtbAIyo3zEzTwNO64uiVF1EzMrMsc2uQ+3Hz56awc+dmsXPnprBz13/0hZTW4FOoKOurQNY2IRaJEmSJKlfa5cgeRcwOCLeWNO2DeBCO5IkSZJUUVsEycxcBFwIHBMRwyLiHcAHgXOaW5leBacdq1n87KkZ/NypWfzsqRn83PUjbbHYDhT3kQTOAHYD5gNfy8yfNLcqSZIkSep/2iZISpIkSZIaoy2mtkqSJEmSGscgKUmSJEmqxCApSXUiYnREfCgiNu+m72PNqEntISK2i4j9IuI1ETEoIg6OiO9GxF7Nrk3tJSJmletLSH0iIt4QEZ8r/7/3xuW/Q83mNZLqlyJiEHBEZh7T7Fo0sETEHsD5wH3AG4EZwOczc0nZ/0xm1t+XVlphEXEQcCyQwMMUq41vCAwGxgOHZOYZzatQA1FEnN1D137AJcBzmfmJPixJbSIi/pqZW5WvdwZ+Bfye4v+B/wp8MDN/28QStRwGSfVLEbEa8GxmDmp2LRpYIuIm4OjMvDQi1gXOBZ4H9snMf0TEwswc0dwqNRBFxB3AB4AA/gq8MzP/r+zbHTghM7dpYokagCJiMfAn4GqKz16XrwCnAp2ZObUZtWlgq/33NCKuB36UmWeX2/8GfC4zd2xmjVo2g6RaVkQs6y/vg4F/M0iq0SJiQWauUbM9mCJMjqT4Jf8xg6RWhtrPXkQsAoZn+Y90RKwCPJmZazaxRA1A5RTCk4GngEMz86Gy/RFgm8x8vJn1aeCqneETEY8D62fmC+X2IGBeZjq9uoV5jaRa2f7AYuChbh5zm1iXBranImLDro3MfBH4GPAAcBXgHy+0siyKiCHl6xn58r/0rg681ISaNMBl5t2ZuTtwMfDbiPhK+Qc0Rxq0sg2JiE9GxIEUn7dVa/oG47+3LW9wswuQluE24PLMnFnfERFDga/1fUlqA1cBnwSWXn9b/kJ/YEScCrytWYVpwLsa2Az4a2Z+rq5vL+DWvi9J7SIzfxYRl1H8v+8WwJkXWtluALquv/0L8CbgxnJ7Z+DOZhSl3nNqq1pWRHwOeCgzL+6mbxBwpNdtqNEiYlVgcGY+20P/6Mx8oI/LUpuLiFEUf9N4otm1aOCLiG0pfpGfnpnPNbkctaGIWAMY4v/zWptBUpIkSZJUiddISpIkSZIqMUhKkiRJkioxSEqS2l5ETImIrHk8GxG3RcTEBp7jvyLi773cd5+I+G1EPB0Rz0fEXRFxbESMbFQ9VUXExIjYu1nnlyS1FldtlSSpsADYo3w9DHg/MD0iOjPzJ31VREScCHwROBP4LvAMxWqGnwa2Bj7UV7XUmQjcTnGbCElSmzNISpJUeDEz/1izfXVE7AjsDfRJkIyI9wNfBg7KzDNquq6LiNOA9/RFHZIkLY9TWyVJ6tlCYEhtQ0SsHRHTI+KxiHguIv4vIt5at8+aEfGTiFgUEY9ExBG9PN+XgD/XhUgAMnNJZv665hwjI+KsiJhfTsW9NiLG1tWREXFwXduUiHiiZntCud9bIuLKsuY7ImKfmn2uBf4fcEDN9N8JvfyaJEkDkEFSkqRSRAwuHx0R8XGKe+ldVNO/GnAVsBtwGMVo5Tzgqoh4Xc2hzgTeSzFFdSLFSOL45Zx7CLAj8JtelnsxsDvwFeCjFP+mXxMRm/Xy/fV+AsykmDp7N/CziNig7PsscAdwGfD28nHpqzyPJGkAcGqrJEmFdYAX6tpOysyza7Y/DrwZ2Doz7waIiKuAO4FDgcMiYmuKgDk+M88r97kGeIDiesdlnX+1cr9liog9gHcAu2TmdWXbb4G/UwTcScs7Rje+2zUSGhE3AY8BewGnZuZfImIRMK9u+q8kqU0ZJCVJKiwAxpWvV6OYynlMRDyZmVPL9nHATcB9EVH7b+h1QNe00h3K55ldnZnZGRFXAi+bAtuD7MU+/0IR6q6rOceiiLgEeGcv3t+dK2qONT8iHgc2WMb+kqQ2ZpCUJKnwYmbOqtn+fTnd9FsR8YPMfBIYCbyNV45cAtxbPr8OWJiZi+v6H1/O+ecDzwOje1Hr6ylGDOs9Bqzdi/d35+m67X8AQ1/lsSRJA5xBUpKknv0FWBXYFHiyfMwCPtPNvs+Xz48CIyJi9bow+dplnSgzX4iI31Nc93jkcup6pIfjrVvWWFvTqnX7vNqgKUnSUi62I0lSz95cPj9YPl8NbAY8kJmz6h63lfvcWD5/oOsgETGcYoGe5fkeMDYiDqjviIhVymsjAW4AXhsRO9X0vwZ4H/C7mrfNBbaqPQbw7l7U0R1HKCVJSzkiKUlSYXBEvK18vSrFNZJHAr/MzEfL9rOBTwPXRsR/AX+jWCTnX4BHM/O7mTknImYCP4yIDorRw8OAZ5dXQGb+KiK+A5weEe8Afgl0AluW5/078JvMvLwcvTwvIr5GMS32K8DqwLdrDnkR8LmIuLms9T+AjlfxvYFi1dbdI2L38nz3Zeb8V3ksSVI/Z5CUJKmwBvCH8vULwP3AqcCxXTtk5nMR8S7gGGAqxVTSx4E/UbO4DjAB+CHFCGMncArFSOV+yysiMw+NiP8DDqa4JcfqFAFyJvBfNbt+CDixPMfQsoZ3Z+Y9NftMpZgCeyzFiOLJwO3lsas6luL6zfMpwugngRmv4jiSpAEgMnuzOJwkSZIkSQWvkZQkSZIkVWKQlCRJkiRVYpCUJEmSJFVikJQkSZIkVWKQlCRJkiRVYpCUJEmSJFVikJQkSZIkVWKQlCRJkiRVYpCUJEmSJFXy/wFl9UKKKV6pbQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,5)) \n",
    "plt.title(\"Most Common Bed Count\", fontsize=18) \n",
    "plt.bar(common_bed_count[\"bed_count\"], common_bed_count[\"counts\"],color= '#99ff99',edgecolor='green', linewidth = 1)\n",
    "plt.xlabel(\"Bed Count\",fontsize=15) \n",
    "plt.ylabel(\"Frquency\",fontsize=15) \n",
    "plt.xticks(fontsize=12, rotation=90)\n",
    "plt.yticks(fontsize=12)\n",
    "for k,v in common_bed_count[\"counts\"].items(): \n",
    "        plt.text(k,v+300,str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "77b993cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0     1777\n",
       "2.0       39\n",
       "3.0       32\n",
       "4.0       28\n",
       "6.0       16\n",
       "13.0      13\n",
       "5.0       12\n",
       "7.0       11\n",
       "8.0        8\n",
       "11.0       7\n",
       "12.0       7\n",
       "9.0        6\n",
       "15.0       6\n",
       "17.0       4\n",
       "16.0       4\n",
       "39.0       4\n",
       "22.0       4\n",
       "10.0       4\n",
       "14.0       4\n",
       "30.0       4\n",
       "18.0       4\n",
       "19.0       4\n",
       "49.0       3\n",
       "36.0       3\n",
       "20.0       3\n",
       "25.0       3\n",
       "28.0       2\n",
       "34.0       2\n",
       "52.0       2\n",
       "43.0       2\n",
       "48.0       2\n",
       "24.0       1\n",
       "35.0       1\n",
       "26.0       1\n",
       "23.0       1\n",
       "37.0       1\n",
       "33.0       1\n",
       "27.0       1\n",
       "32.0       1\n",
       "40.0       1\n",
       "47.0       1\n",
       "38.0       1\n",
       "53.0       1\n",
       "42.0       1\n",
       "45.0       1\n",
       "50.0       1\n",
       "Name: review_count, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['review_count'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "c880e29b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_count</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6.0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13.0</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8.0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>39.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    review_count  counts\n",
       "0            1.0    1777\n",
       "1            2.0      39\n",
       "2            3.0      32\n",
       "3            4.0      28\n",
       "5            6.0      16\n",
       "12          13.0      13\n",
       "4            5.0      12\n",
       "6            7.0      11\n",
       "7            8.0       8\n",
       "10          11.0       7\n",
       "11          12.0       7\n",
       "8            9.0       6\n",
       "14          15.0       6\n",
       "17          18.0       4\n",
       "35          39.0       4"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_reviews = df.groupby(['review_count']).size().reset_index(name='counts').sort_values('counts',ascending=False).head(15)\n",
    "common_reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "4ddda89e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,5)) \n",
    "plt.title(\"People Reviews\", fontsize=18) \n",
    "plt.bar(common_reviews[\"review_count\"], common_reviews[\"counts\"],color= '#99ff99',edgecolor='green', linewidth = 1)\n",
    "plt.xlabel(\"Review Count\",fontsize=15) \n",
    "plt.ylabel(\"Frquency\",fontsize=15) \n",
    "plt.xticks(fontsize=12, rotation=90)\n",
    "plt.yticks(fontsize=12)\n",
    "for k,v in common_reviews[\"counts\"].items(): \n",
    "        plt.text(k,v+300,str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49eb8c6d",
   "metadata": {},
   "source": [
    "## Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "5d0bf354",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedroom_count</th>\n",
       "      <th>bed_count</th>\n",
       "      <th>review_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>32.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>43.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   price  bedroom_count  bed_count  review_count\n",
       "1   35.0            1.0        1.0           1.0\n",
       "3   32.0            1.0        1.0           1.0\n",
       "4   73.0            1.0        3.0          16.0\n",
       "6   45.0            1.0        1.0           1.0\n",
       "8   43.0            1.0        1.0           1.0"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "90a33101",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x7f8921f7a5e0>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 540x180 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(df,x_vars=['bedroom_count','bed_count','review_count'],y_vars='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "c5b40c24",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.drop(['price'],axis=1).values\n",
    "y = df['price'].values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b8e3a0b",
   "metadata": {},
   "source": [
    "### Split Dataset [training - test]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "6afdbed3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# divid into train and test\n",
    "x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=.2,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "0cb78af9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scalers \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "X_train_scaled = scaler.fit_transform(x_train)\n",
    "X_test_scaled = scaler.transform(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8262ae40",
   "metadata": {},
   "source": [
    "### Train Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "40708d14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_model = LinearRegression()\n",
    "my_model.fit(x_train , y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "ad336653",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5.23074152, 14.3813124 , -0.38170826])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "bc0c5eb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24.121254263227502"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_model.intercept_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c5344b3",
   "metadata": {},
   "source": [
    "## Predict Value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "1222387c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([57.73291232, 43.35159993, 43.35159993, 43.35159993, 43.35159993])"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predicated Value\n",
    "y_predict = my_model.predict(x_test[:5])\n",
    "y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "16034646",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([136., 175.,  47.,  39.,  30.])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# real value\n",
    "y_test[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c267b1ce",
   "metadata": {},
   "source": [
    "### Regression Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "aaffbb42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1883690099841977\n",
      "0.1774561450534059\n"
     ]
    }
   ],
   "source": [
    "train_data_score = my_model.score(x_train , y_train) \n",
    "test_data_score = my_model.score(x_test,y_test)\n",
    "\n",
    "print(train_data_score)\n",
    "print(test_data_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7dbd514",
   "metadata": {},
   "source": [
    "## Evaluate "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "2531009a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1774561450534059"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "y_pred = my_model.predict(x_test)\n",
    "r2_score(y_test , y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "2067f0e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Predicted Data')"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test,y_pred)\n",
    "plt.xlabel('Actual Data')\n",
    "plt.ylabel('Predicted Data')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b967d2f6",
   "metadata": {},
   "source": [
    "-----------------------\n",
    "## Ploynomial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "86c0a175",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "\n",
    "poly = PolynomialFeatures(degree=3) \n",
    "\n",
    "X_train_poly = poly.fit_transform(x_train)\n",
    "X_test_poly = poly.transform(x_test)\n",
    "\n",
    "poly_model = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "41286db6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly_model.fit(X_train_poly, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "79e12d0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train R^2 is: 0.21757091933188077\n",
      "train R^2 is: 0.1363927994728712\n"
     ]
    }
   ],
   "source": [
    "poly_test=poly_model.score(X_test_poly, y_test)\n",
    "poly_train=poly_model.score(X_train_poly, y_train)\n",
    "\n",
    "print(f'train R^2 is: {poly_train}')\n",
    "print(f'train R^2 is: {poly_test}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edb71c39",
   "metadata": {},
   "source": [
    "------\n",
    "## Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "1435495a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=1)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RepeatedKFold\n",
    "from sklearn.linear_model import Ridge, Lasso\n",
    "\n",
    "rl = Ridge(alpha=1)\n",
    "rl.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "ba525d17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " train R^2 is: 0.1883689265316808\n",
      " test R^2 is: 0.17744859512517774\n"
     ]
    }
   ],
   "source": [
    "rl_train = rl.score(X_train_scaled, y_train)\n",
    "rl_test = rl.score(X_test_scaled, y_test)\n",
    "\n",
    "print(f' train R^2 is: {rl_train}')\n",
    "print(f' test R^2 is: {rl_test}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "917c90e5",
   "metadata": {},
   "source": [
    "------\n",
    "## Lasso "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "977fa415",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean MAE: 19.428 (1.276)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge, Lasso\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from numpy import absolute\n",
    "from numpy import mean\n",
    "from numpy import std\n",
    "\n",
    "lasso_model = Lasso(alpha=1.0)\n",
    "cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "scores = cross_val_score(lasso_model, x, y, scoring='neg_mean_absolute_error', cv=cv, n_jobs=-1)\n",
    "scores = absolute(scores)\n",
    "\n",
    "print('Mean MAE: %.3f (%.3f)' % (mean(scores), std(scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "d09ea811",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso()"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_model.fit(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "35ae5d94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " train R^2 is: 0.1848473521528491\n",
      " test R^2 is: 0.17790462644093008\n"
     ]
    }
   ],
   "source": [
    "train_data_score_ls = lasso_model.score(x_train , y_train)\n",
    "test_data_score_ls = lasso_model.score(x_test , y_test)\n",
    "\n",
    "print(f' train R^2 is: {train_data_score_ls}')\n",
    "print(f' test R^2 is: {test_data_score_ls}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b36a2fd1",
   "metadata": {},
   "source": [
    "---\n",
    "## Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "9b2755be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(max_depth=4)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "DT_model = DecisionTreeRegressor(max_depth=4)\n",
    "DT_model.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "edeaf776",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([63.9665272, 42.3797942, 42.3797942, 42.3797942, 42.3797942])"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict_dt = DT_model.predict(x_test[:5])\n",
    "y_predict_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "480cec40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([136., 175.,  47.,  39.,  30.])"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "425be647",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " train R^2 is: 0.21534637422620184\n",
      " test R^2 is: 0.16436764916139346\n"
     ]
    }
   ],
   "source": [
    "## Score\n",
    "train_data_score_dt = DT_model.score(x_train , y_train)\n",
    "test_data_score_dt = DT_model.score(x_test , y_test)\n",
    "\n",
    "\n",
    "print(f' train R^2 is: {train_data_score_dt}')\n",
    "print(f' test R^2 is: {test_data_score_dt}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9a558ea",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
